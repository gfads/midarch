datatype PROCNAMES = requestor | crh | t1 | t2 | t3 | srh | namingproxy | fibonacciinvoker 
channel I_PreInvR,I_PosInvP,I_PosTerR,I_PreTerP
channel TerR,InvP,TerP,InvR : PROCNAMES
NAMINGPROXY = I_PreInvR -> InvR.t1 -> TerR.t1 -> I_PosTerR -> NAMINGPROXY
FIBONACCIINVOKER = InvP.t3 -> I_PosInvP -> TerP.t3 -> FIBONACCIINVOKER
REQUESTOR = InvP.t1 -> I_PosInvP -> InvR.t2 -> TerR.t2 -> I_PosTerR -> TerP.t1 -> REQUESTOR
CRH = InvP.t2 -> I_PosInvP -> I_PreTerP -> TerP.t2 -> CRH
SRH = I_PreInvR -> InvR.t3 -> TerR.t3 -> I_PosTerR -> SRH
T1 = InvP.namingproxy -> InvR.requestor -> TerR.requestor -> TerP.namingproxy -> T1
T2 = InvP.requestor -> InvR.crh -> TerR.crh -> TerP.requestor -> T2
T3 = InvP.srh -> InvR.fibonacciinvoker -> TerR.fibonacciinvoker -> TerP.srh -> T3

P1 = (NAMINGPROXY|||FIBONACCIINVOKER|||REQUESTOR|||CRH|||SRH)
[|{|InvR,TerR,InvP,TerP|}|]
(T3[[InvP.srh <- InvR.t3,InvR.fibonacciinvoker <- InvP.t3,TerR.fibonacciinvoker <- TerP.t3,TerP.srh <- TerR.t3]]|||T1[[InvP.namingproxy <- InvR.t1,InvR.requestor <- InvP.t1,TerR.requestor <- TerP.t1,TerP.namingproxy <- TerR.t1]]|||T2[[InvP.requestor <- InvR.t2,InvR.crh <- InvP.t2,TerR.crh <- TerP.t2,TerP.requestor <- TerR.t2]])
assert P1 :[deadlock free]