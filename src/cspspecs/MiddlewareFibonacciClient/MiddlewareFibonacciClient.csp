datatype PROCNAMES = namingproxy | fibonacciproxy | t1 | t2 | requestor | crh 
channel I_PosInvP,I_PreTerP,I_PreInvR,I_PosTerR
channel InvP,TerP,InvR,TerR : PROCNAMES
CRH = InvP.t2 -> I_PosInvP -> I_PreTerP -> TerP.t2 -> CRH
NAMINGPROXY = I_PreInvR -> InvR.t1 -> TerR.t1 -> I_PosTerR -> NAMINGPROXY
FIBONACCIPROXY = I_PreInvR -> InvR.t1 -> TerR.t1 -> I_PosTerR -> FIBONACCIPROXY
REQUESTOR = InvP.t1 -> I_PosInvP -> InvR.t2 -> TerR.t2 -> I_PosTerR -> TerP.t1 -> REQUESTOR
T2 = InvP.requestor -> InvR.crh -> TerR.crh -> TerP.requestor -> T2
T1 = InvP.namingproxy -> InvR.requestor -> TerR.requestor -> TerP.namingproxy -> T1 [] InvP.fibonacciproxy -> InvR.requestor -> TerR.requestor -> TerP.fibonacciproxy -> T1

MiddlewareFibonacciClient = (CRH|||NAMINGPROXY|||FIBONACCIPROXY|||REQUESTOR)
[|{|InvR,TerR,InvP,TerP|}|]
(T2[[InvP.requestor <- InvR.t2,InvR.crh <- InvP.t2,TerR.crh <- TerP.t2,TerP.requestor <- TerR.t2]]|||T1[[InvP.namingproxy <- InvR.t1,InvR.requestor <- InvP.t1,TerR.requestor <- TerP.t1,TerP.namingproxy <- TerR.t1,InvP.fibonacciproxy <- InvR.t1,InvR.requestor <- InvP.t1,TerR.requestor <- TerP.t1,TerP.fibonacciproxy <- TerR.t1]])
assert MiddlewareFibonacciClient :[deadlock free]