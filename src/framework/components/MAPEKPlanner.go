package components

import (
	"framework/messages"
	"shared/shared"
	"framework/configuration/commands"
	"reflect"
	"framework/element"
)

type MAPEKPlanner struct{}

func (MAPEKPlanner) I_Plan(msg *messages.SAMessage, info *interface{}, r *bool) {

	// Info generated by the 'Analyser'
	analysisResult := msg.Payload.(shared.AnalysisResult)

	// Build new plan from analysis result
	plan := commands.Plan{}
	cmds := []commands.HighLevelCommand{}
	conf := *info // Configuration is the "info" of this component

	newPlugins := reflect.ValueOf(analysisResult.Result)
	for i := 0; i < newPlugins.Len(); i++ {
		pluginName := newPlugins.Index(i).String()
		fy := shared.LoadPlugin(pluginName, "GetBehaviourExp")
		fz := shared.LoadPlugin(pluginName, "GetTypeElem")

		getBehaviourExp := fy.(func() string)
		getTypeElem := fz.(func() interface{})

		idNewElement := element.DefineOldElement(conf, getTypeElem()) // TODO This is critical and needs to be improved in the future
		newElem := element.Element{Id: idNewElement, TypeElem: getTypeElem(), CSP: getBehaviourExp()}
		cmd := commands.HighLevelCommand{commands.REPLACE_COMPONENT, newElem}
		cmds = append(cmds, cmd)
	}
	plan.Cmds = cmds

	*msg = messages.SAMessage{Payload: plan}
}