datatype PROCNAMES = crh | srh | naming | requestor | cinvoker | marshaller | marshaller2 | t2 | t3 | t4 | t5 | t1
channel InvP,InvR,TerR,TerP : PROCNAMES
channel I_Accept,I_Out,I_Beforesend,I_Beforeproxy,I_Beforeunmarshalling,I_Beforeserver,I_Process,I_Receive,I_Send,I_In,I_Beforemarshalling
NAMING = I_In -> InvR.t1 -> TerR.t1 -> I_Out -> NAMING
REQUESTOR = InvP.t1 -> I_Beforemarshalling -> InvR.t2 -> TerR.t2 -> I_Beforesend -> InvR.t3 -> TerR.t3 -> I_Beforeunmarshalling -> InvR.t2 -> TerR.t2 -> I_Beforeproxy -> TerP.t1 -> REQUESTOR
CINVOKER = InvP.t4 -> I_Beforeunmarshalling -> InvR.t5 -> TerR.t5 -> I_Beforeserver -> I_Beforemarshalling -> InvR.t5 -> TerR.t5 -> I_Beforesend -> TerP.t4 -> CINVOKER
MARSHALLER = InvP.t2 -> I_Process -> TerP.t2 -> MARSHALLER
MARSHALLER2 = InvP.t5 -> I_Process -> TerP.t5 -> MARSHALLER2
CRH = InvP.t3 -> I_Process -> TerP.t3 -> CRH
SRH = I_Accept -> SRHP1 
 SRHP1 = I_Accept -> SRHP1 [] I_Receive -> InvR.t4 -> TerR.t4 -> I_Send -> SRHP1

T3 = InvP.requestor -> InvR.crh-> TerR.crh -> TerP.requestor ->T3
T4 = InvP.srh -> InvR.cinvoker-> TerR.cinvoker -> TerP.srh ->T4
T5 = InvP.cinvoker -> InvR.marshaller2-> TerR.marshaller2 -> TerP.cinvoker ->T5
T1 = InvP.naming -> InvR.requestor-> TerR.requestor -> TerP.naming ->T1
T2 = InvP.requestor -> InvR.marshaller-> TerR.marshaller -> TerP.requestor ->T2

calculatordistributedservermid = (CRH ||| SRH ||| NAMING ||| REQUESTOR ||| CINVOKER ||| MARSHALLER ||| MARSHALLER2)[|{|InvP,InvR,TerR,TerP|}|](T2[[InvP.requestor <- InvR.t2,InvR.marshaller <- InvP.t2,TerR.marshaller <- TerP.t2,TerP.requestor <- TerR.t2]] ||| T3[[InvP.requestor <- InvR.t2,InvR.marshaller <- InvP.t2,TerR.marshaller <- TerP.t2,TerP.requestor <- TerR.t2,InvP.requestor <- InvR.t3,InvR.crh <- InvP.t3,TerR.crh <- TerP.t3,TerP.requestor <- TerR.t3]] ||| T4[[InvP.requestor <- InvR.t2,InvR.marshaller <- InvP.t2,TerR.marshaller <- TerP.t2,TerP.requestor <- TerR.t2,InvP.requestor <- InvR.t3,InvR.crh <- InvP.t3,TerR.crh <- TerP.t3,TerP.requestor <- TerR.t3,InvP.srh <- InvR.t4,InvR.cinvoker <- InvP.t4,TerR.cinvoker <- TerP.t4,TerP.srh <- TerR.t4]] ||| T5[[InvP.requestor <- InvR.t2,InvR.marshaller <- InvP.t2,TerR.marshaller <- TerP.t2,TerP.requestor <- TerR.t2,InvP.requestor <- InvR.t3,InvR.crh <- InvP.t3,TerR.crh <- TerP.t3,TerP.requestor <- TerR.t3,InvP.srh <- InvR.t4,InvR.cinvoker <- InvP.t4,TerR.cinvoker <- TerP.t4,TerP.srh <- TerR.t4,InvP.cinvoker <- InvR.t5,InvR.marshaller2 <- InvP.t5,TerR.marshaller2 <- TerP.t5,TerP.cinvoker <- TerR.t5]] ||| T1[[InvP.requestor <- InvR.t2,InvR.marshaller <- InvP.t2,TerR.marshaller <- TerP.t2,TerP.requestor <- TerR.t2,InvP.requestor <- InvR.t3,InvR.crh <- InvP.t3,TerR.crh <- TerP.t3,TerP.requestor <- TerR.t3,InvP.srh <- InvR.t4,InvR.cinvoker <- InvP.t4,TerR.cinvoker <- TerP.t4,TerP.srh <- TerR.t4,InvP.cinvoker <- InvR.t5,InvR.marshaller2 <- InvP.t5,TerR.marshaller2 <- TerP.t5,TerP.cinvoker <- TerR.t5,InvP.naming <- InvR.t1,InvR.requestor <- InvP.t1,TerR.requestor <- TerP.t1,TerP.naming <- TerR.t1]])
assert calculatordistributedservermid :[deadlock free]