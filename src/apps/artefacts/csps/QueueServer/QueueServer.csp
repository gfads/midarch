datatype PROCNAMES = manager | notifier | engine | invoker | srh | t1 | t2 | t3 | t4
channel TerR,InvP,TerP,InvR : PROCNAMES
channel I_NC,I_SM,I_Out,I_Publish,I_In,I_Receive,I_Send,I_Process
MANAGER = InvP.t4 -> I_Process -> TerP.t4 -> MANAGER
NOTIFIER = InvP.t3 -> I_Process -> TerP.t3  -> NOTIFIER
ENGINE = I_NC -> InvR.t3 -> TerR.t3 -> ENGINE [] InvP.t2 -> (I_SM -> InvR.t4 -> TerR.t4 -> I_Out -> TerP.t2 -> ENGINE [] I_Publish -> TerP.t2 -> ENGINE)
INVOKER = InvP.t1 -> I_In -> InvR.t2 -> TerR.t2 -> I_Out -> TerP.t1 -> INVOKER
SRH = I_Receive -> InvR.t1 -> TerR.t1 -> I_Send -> SRH
T3 = InvP.engine -> InvR.notifier -> TerR.notifier -> TerP.engine -> T3
T4 = InvP.engine -> InvR.manager -> TerR.manager -> TerP.engine -> T4
T1 = InvP.srh -> InvR.invoker -> TerR.invoker -> TerP.srh -> T1
T2 = InvP.invoker -> InvR.engine -> TerR.engine -> TerP.invoker -> T2

QueueServer = (MANAGER ||| NOTIFIER ||| ENGINE ||| INVOKER ||| SRH)[|{|TerR,InvP,TerP,InvR|}|](T2[[InvP.invoker <- InvR.t2,InvR.engine <- InvP.t2,TerR.engine <- TerP.t2,TerP.invoker <- TerR.t2]] ||| T3[[InvP.invoker <- InvR.t2,InvR.engine <- InvP.t2,TerR.engine <- TerP.t2,TerP.invoker <- TerR.t2,InvP.engine <- InvR.t3,InvR.notifier <- InvP.t3,TerR.notifier <- TerP.t3,TerP.engine <- TerR.t3]] ||| T4[[InvP.invoker <- InvR.t2,InvR.engine <- InvP.t2,TerR.engine <- TerP.t2,TerP.invoker <- TerR.t2,InvP.engine <- InvR.t3,InvR.notifier <- InvP.t3,TerR.notifier <- TerP.t3,TerP.engine <- TerR.t3,InvP.engine <- InvR.t4,InvR.manager <- InvP.t4,TerR.manager <- TerP.t4,TerP.engine <- TerR.t4]] ||| T1[[InvP.invoker <- InvR.t2,InvR.engine <- InvP.t2,TerR.engine <- TerP.t2,TerP.invoker <- TerR.t2,InvP.engine <- InvR.t3,InvR.notifier <- InvP.t3,TerR.notifier <- TerP.t3,TerP.engine <- TerR.t3,InvP.engine <- InvR.t4,InvR.manager <- InvP.t4,TerR.manager <- TerP.t4,TerP.engine <- TerR.t4,InvP.srh <- InvR.t1,InvR.invoker <- InvP.t1,TerR.invoker <- TerP.t1,TerP.srh <- TerR.t1]])
assert QueueServer :[deadlock free]