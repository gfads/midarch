datatype PROCNAMES = proxyn | proxyf | requestor | crh | t1 | t2
channel InvR,TerR,InvP,TerP : PROCNAMES
channel I_In,I_Out,I_Process
PROXYN = I_In -> InvR.t1 -> TerR.t1 -> I_Out -> PROXYN
PROXYF = I_In -> InvR.t1 -> TerR.t1 -> I_Out -> PROXYF
REQUESTOR = InvP.t1 -> I_In -> InvR.t2 -> TerR.t2 -> I_Out -> TerP.t1 -> REQUESTOR
CRH = InvP.t2 -> I_Process -> TerP.t2 -> CRH
T1 = InvP.proxyn -> InvR.requestor -> TerR.requestor -> TerP.proxyn -> T1 [] InvP.proxyf -> InvR.requestor -> TerR.requestor -> TerP.proxyf -> T1
T2 = InvP.requestor -> InvR.crh -> TerR.crh -> TerP.requestor -> T2

midfibonacciclient = (PROXYN ||| PROXYF ||| REQUESTOR ||| CRH)[|{|InvR,TerR,InvP,TerP|}|](T1[[InvP.proxyn <- InvR.t1,InvR.requestor <- InvP.t1,TerR.requestor <- TerP.t1,TerP.proxyn <- TerR.t1,InvP.proxyf <- InvR.t1,InvR.requestor <- InvP.t1,TerR.requestor <- TerP.t1,TerP.proxyf <- TerR.t1]] ||| T2[[InvP.proxyn <- InvR.t1,InvR.requestor <- InvP.t1,TerR.requestor <- TerP.t1,TerP.proxyn <- TerR.t1,InvP.proxyf <- InvR.t1,InvR.requestor <- InvP.t1,TerR.requestor <- TerP.t1,TerP.proxyf <- TerR.t1,InvP.requestor <- InvR.t2,InvR.crh <- InvP.t2,TerR.crh <- TerP.t2,TerP.requestor <- TerR.t2]])
assert midfibonacciclient :[deadlock free]